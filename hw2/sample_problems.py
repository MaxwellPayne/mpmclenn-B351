# Updated Sept 9, 2014
#
# Test cases for 8-puzzle search
# Relies on "makeState".
# 
# You can either use the test cases individually, or they're arranged
# into lists by group - you can "eval" each item in the list in turn
# and invoke your search function on the eval'd state.
# 
# The depth limits given are for optimal paths (such as you would get
# with breadth-first search but not necessarily depth-first).  They are
# theoretical upper limits for optimal paths.  The initial states were 
# generated by performing the given number of random moves from the 
# goal state, so it is possible that the actual optimal depth is much 
# less than indicated for a particular example.

from EightPuzzle import *
from mpmclenn_uninformed import *
from mpmclenn_informed import *

def testUninformedSearch(initialState, goalState, limit):
    searcher = UniformCostSolver(initialState, goal_state=goalState, limit=limit)
    return searcher.solve()

def testInformedSearch(initialState, goalState, limit):
    raise NotImplementedError('informed search doesnt yet have heuristics')
    heuristics = (lambda node: 0,)
    searcher = AstarSolver(initialState, goal_state=goalState, limit=limit, heuristic=heuristics)


goalState = makeState(1, 2, 3, 4, 5, 6, 7, 8, "blank")

# First group of test cases - should have solutions with depth <= 5
initialState1 = makeState(2, "blank", 3, 1, 5, 6, 4, 7, 8)
initialState2 = makeState(1, 2, 3, "blank", 4, 6, 7, 5, 8)


# Second group of test cases - should have solutions with depth <= 10
initialState3 = makeState(2, 8, 3, 1, "blank", 5, 4, 7, 6)
initialState4 = makeState(1, 2, 3, 4, 5, 6, "blank", 7, 8)


# Third group of test cases - should have solutions with depth <= 20
initialState5 = makeState("blank", 5, 3, 2, 1, 6, 4, 7, 8)
initialState6 = makeState(5, 1, 3, 2, "blank", 6, 4, 7, 8)


# Fourth group of test cases - should have solutions with depth <= 50
initialState7 = makeState(2, 6, 5, 4, "blank", 3, 7, 1, 8)
initialState8 = makeState(3, 6, "blank", 5, 7, 8, 2, 1, 4)

print "Test 1 Uninformed %s" % \
    str(testUninformedSearch(initialState1, goalState, 10000000))
print "Test 2 Uninformed %s" % \
    str(testUninformedSearch(initialState2, goalState, 10000000))
print "Test 3 Uninformed %s" % \
    str(testUninformedSearch(initialState3, goalState, 10000000))
print "Test 4 Uninformed %s" % \
    str(testUninformedSearch(initialState4, goalState, 10000000))
print "Test 5 Uninformed %s" % \
    str(testUninformedSearch(initialState5, goalState, 10000000))
print "Test 6 Uninformed %s" % \
    str(testUninformedSearch(initialState6, goalState, 10000000))
print "Test 7 Uninformed %s" % \
    str(testUninformedSearch(initialState7, goalState, 10000000))
print "Test 8 Uninformed %s" % \
    str(testUninformedSearch(initialState8, goalState, 10000000))

assert False

print " "
print " "
print " "
print " "
print " "

print "Test 1 Informed 1 ___________________"
testInformedSearch(initialState1, goalState, 10000000)
print "Test 2 Informed 1 ___________________"
testInformedSearch(initialState2, goalState, 10000000)
print "Test 3 Informed 1 ___________________"
testInformedSearch(initialState3, goalState, 10000000)
print "Test 4 Informed 1 ___________________"
testInformedSearch(initialState4, goalState, 10000000)
print "Test 5 Informed 1 ___________________"
testInformedSearch(initialState5, goalState, 10000000)
print "Test 6 Informed 1 ___________________"
testInformedSearch(initialState6, goalState, 10000000)
print "Test 7 Informed 1 ___________________"
testInformedSearch(initialState7, goalState, 10000000)
print "Test 8 Informed 1 ___________________"
testInformedSearch(initialState8, goalState, 10000000)
